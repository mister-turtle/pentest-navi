#!/usr/bin/env bash

function _nmap
{
    if ! _nmap_prereq; then
        echo -e "${RED}nmap is not installed or in PATH${NC}"
        return 1
    fi

    dirs_input="${1:-./scope}"
    dirs_output="./nmap/"
    scan="${2}"
    top="${3}"

    [[ -z "${scan}"          ]] && { echo -e "${RED}No scan type selected${NC}"; return 1; }
    echo -e "${BLUE}Pentest-Navi - nmap ${scan}${NC}"

    [[ ! -e "${dirs_input}"  ]] && { echo -e "${RED}Input file ${dirs_input} doesnt exist${NC}"; return 1; }
    [[ ! -d "${dirs_output}" ]] && mkdir -p "${dirs_output}"

    case "${scan}" in

    "http")
        _nmap_internal_http
        ;;
    "top")
        _nmap_internal_top "${top}"
        ;;
    "alltcp")
        _nmap_internal_alltcp
        ;;
    "scripts")
        _nmap_internal_scripts
        ;;
    *)
        echo -e "${RED}Scan type ${scan} not supported"
        ;;
    esac

}

function _nmap_scripts
{
   if ! _nmap_prereq; then
        echo -e "${RED}nmap is not installed or in PATH${NC}"
        return 1
    fi

    dirs_input="${1:-./scope}"
    dirs_output="./nmap/"
    dirs_portsin="${2}"    

    [[ -z "${scan}"          ]] && { echo -e "${RED}No scan type selected${NC}"; return 1; }
    echo -e "${BLUE}Pentest-Navi - nmap ${scan}${NC}"

    [[ ! -e "${dirs_input}"  ]] && { echo -e "${RED}Input file ${dirs_input} doesnt exist${NC}"; return 1; }
    [[ ! -d "${dirs_output}" ]] && mkdir -p "${dirs_output}"
    [[ ! -e "${dirs_portsin}" ]] && { echo -e "${RED}Ports file ${dirs_portsin} doesnt exist${NC}"; return 1; }

    ports="$(tr '\n' , <"${dirs_portsin}")"

    _nmap_internal_scripts
}

function _nmap_internal_http
{
    nmap -Pn -n -v -p 80,443,8080,8443,9000 -iL "${dirs_input}" -oA "${dirs_output}nmap-http"
}

function _nmap_internal_top
{
    num="${1}"
    [[ -z "${num}" ]] && { echo -e "${RED}No number given for top-ports${NC}"; return 1; }
    nmap -Pn -n -v --top-ports="${num}" -iL "${dirs_input}" -oA "${dirs_output}nmap-tcp-top${num}"
}

function _nmap_internal_alltcp
{
    nmap -Pn -n -v -p- -iL "${dirs_input}" -oA "${dirs_output}nmap-tcp-all"
}

function _nmap_internal_scripts
{
    sudo nmap -Pn -n -v -p "${ports}" -sC -sV -O -iL "${dirs_input}" -oA "${dirs_output}nmap-scripts"
}

function _nmap_merge
{
    dirs_input="${1}"
    dirs_output="${2}/nmap-merged.xml"

    _pnavi_banner "nmap merge"    

    [[ ! -d "${dirs_input}" ]] && { _pnavi_output "${RED}input directory ${dirs_input} does not exist${NC}\n"; return 1;}

    DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    if ! "${DIR}/merge_nmap.py" -d "${dirs_input}" -o "${dirs_output}"; then
        _pnavi_output "${RED}failed to merge nmap files${NC}\n"
        return 1
    fi
    _pnavi_output "${GREEN}nmap files merged to ${dirs_output}${NC}\n"
}

function _nmap_bootstrap
{
    dirs_input="${1}"
    dirs_output="${2}/nmap-report.html"

    _pnavi_banner "nmap bootstrap"

    [[ ! -f "${dirs_input}" ]] && { _pnavi_output "${RED}input file ${dirs_input} does not exist${NC}\n", return 1; }

    if ! which xsltproc &> /dev/null; then 
        _pnavi_output "${RED}xsltproc is not installed or available in PATH"
        return 1
    fi

    DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    bootstrap="${DIR}/nmap-bootstrap.xsl"
    [[ ! -f "${bootstrap}" ]] && { _pnavi_output "${RED}cannot find nmap-bootstrap.xsl${NC}\n"; return 1; }

    if ! xsltproc -o "${dirs_output}" "${bootstrap}" "${dirs_input}"; then
        _pnavi_output "${RED}failed to generate html report${NC}\n"
        return 1
    fi

    _pnavi_output "${GREEN}sucesfully created html report ${dirs_output}${NC}\n"
}

function _nmap_prereq
{
    if ! which nmap &> /dev/null; then
        return 1
    fi
    return 0
}