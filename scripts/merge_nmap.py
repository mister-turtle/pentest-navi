#!/usr/bin/env python3
####################################################################################
# 
# merge.py
#
# Description 
# Combine nmap xml files into one XML 
#
# Example 
# python merge.py -f nmap_scan.xml
# python merge.py -f ./nmap/
# 
# Original Author: 
# Hue B. Solutions LLC, CBHue (https://github.com/CBHue/nmap_Merger)
# Mister-Turtle
#
####################################################################################

import os
import re
import time
import logging
import xml.etree.ElementTree as ET
from argparse import ArgumentParser
from xml.etree.ElementTree import ParseError

def merge(xmlFile,mf):
	HOSTS = 0
	with open(mf, mode = 'a', encoding='utf-8') as mergFile:
		with open(xmlFile) as f:		
			nmapXML = ET.parse(f)
			for host in nmapXML.findall('host'):
				HOSTS = HOSTS + 1
				cHost = ET.tostring(host, encoding='unicode', method='xml') 
				mergFile.write(cHost)
				mergFile.flush()	
	return HOSTS

def add_header(f):
	nmap_Header  = '<?xml version="1.0" encoding="UTF-8"?>'
	nmap_Header += '<!DOCTYPE nmaprun>'
	nmap_Header += '<?xml-stylesheet href="file:///usr/share/nmap/nmap.xsl" type="text/xsl"?>'
	nmap_Header += '<!-- Nmap Merged with nmapMergER.py https://github.com/CBHue/nmapMergER -->'
	nmap_Header += '<nmaprun scanner="nmap" args="nmap -iL hostList.txt" start="1" startstr="https://github.com/CBHue/nmapMerge/nmapMerge.py" version="7.70" xmloutputversion="1.04">'
	nmap_Header += '<scaninfo type="syn" protocol="tcp" numservices="1" services="1"/>'
	nmap_Header += '<verbose level="0"/>'
	nmap_Header += '<debugging level="0"/>'

	mfile = open(f, "w")  
	mfile.write(nmap_Header) 
	mfile.close()

def add_footer(f, h):
	nmap_footer  = '<runstats><finished time="1" timestr="Wed Sep  0 00:00:00 0000" elapsed="0" summary="Nmap done at Wed Sep  0 00:00:00 0000; ' + str(h) + ' IP address scanned in 0.0 seconds" exit="success"/>'
	nmap_footer += '</runstats>'
	nmap_footer += '</nmaprun>'

	mfile = open(f, "a")  
	mfile.write(nmap_footer) 
	mfile.close()

#
# If you want to use this as a module you need to pass a set of nmap xmls
#
# nmapSET = set()
# nmapSET.add('/nmap-Dir/nmap_10.10.10.10.xml')
#
# Then call the main function passing the set:
# main(nmapSET)
#
def main(xml_set, outfile):
	HOSTS = 0

	# Check to ensute we have work to do
	if not xml_set:
		logging.info("no XML files were found ... no work to do")
		exit()

	
	# Add Header to mergefile
	add_header(outfile)

	for xml in xml_set:
		if xml.endswith('.xml'):
			logging.info("parsing: %r", xml)
			try:
				H = merge(xml,outfile)
				HOSTS = HOSTS + H
			except Exception as e:
				logging.info(f'failed to parse {xml}: {e}')
				continue

	# Add Footer to mergefile
	add_footer(outfile, HOSTS)
	print('')
	print ("output XML file:", os.path.abspath(outfile))

if __name__ == "__main__":
	
	import sys
	if sys.version_info <= (3, 0):
		sys.stdout.write("this script requires python 3.x\n")
		sys.exit(1)

	parser = ArgumentParser()
	parser.add_argument("-f", "--file", 	dest="filename", help="parse FILE", metavar="FILE")
	parser.add_argument("-d", "--dir", 		dest="directory", help="Parse all xml in directory", metavar="DIR")
	parser.add_argument("-o", "--output",   dest="outfile", help="Output file destination", metavar="OUT")
	parser.add_argument("-q", "--quiet",	dest="verbose",	action="store_false", default=True, help="don't print status messages to stdout")
	args = parser.parse_args()

	s = set()
	
	if args.verbose:
		logging.basicConfig(level=logging.DEBUG, format='%(message)s')		

	if args.outfile is None:

		# Create the Merged filename
		from datetime import datetime
		now = datetime.now() 
		dt = re.sub(r"\s+", '-', str(now))
		dt = re.sub(r":", '-', str(dt))
		args.outfile = "./nmap-merge-" + dt + ".xml"
	
	if args.filename is not None:
		f = args.filename
		if f.endswith('.xml'):
			logging.info("adding: %r", f)
			s.add(f)

	elif args.directory is not None:
		if os.path.isdir(args.directory):
			path = args.directory
			
			for f in os.listdir(path):
				# For now we assume xml is nmap
				if f.endswith('.xml'): 
					fullname = os.path.join(path, f)
					logging.info("adding: %r", fullname)
					s.add(fullname)
		else:
			logging.warn("not a directory: %r", args.directory)
	else :		
		parser.print_help()
		exit()

	# Pass set of xml files and output file to main
	main(s, args.outfile)
