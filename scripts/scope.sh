#!/usr/bin/env bash

function _urls2dns
{
    dirs_input="${1:-./scope_url}"
    dirs_output="${2:-./scope_dns}"

    echo -e "${BLUE}Pentest-Navi - URLs to DNS${NC}"

    [[ ! -e "${dirs_input}" ]] && { echo "Input file ${dirs_input} doesnt exist"; exit 1; }

    python_bin="python"
    if which python3 &> /dev/null; then
        python_bin="python3"
    fi
    
    while read -r line
    do
        dns="$( echo "${line}" | $python_bin -c 'from urllib.parse import urlparse;import sys;print(urlparse(sys.stdin.read()).netloc)' )"
        [[ -z "${dns}" ]] && { echo -e "${line} ${RED}>> Failed${NC}"; continue; }
        echo -e "${line} ${GREEN}>>${NC} ${dns}"
        echo "${dns}" >> "${dirs_output}"
    done < "${dirs_input}"

    sort -u "${dirs_output}" -o "${dirs_output}"
}

function _dns2ip
{
    dirs_input="${1:-./scope_dns}"
    dirs_output="${2:-./scope}"
    dirs_map="${3:-/scope_map}"

    echo -e "${BLUE}Pentest-Navi - DNS to IP${NC}"
    while read -r host
    do
        digout="$( dig +short "${host}" )"
        ret=$?
        [[ $ret -ne 0 ]] && { echo -e "${host} ${RED}>> Failed (dig exit: $ret)${NC}"; continue; }
        [[ -z "${digout}" ]] && { echo -e "${host} ${RED}>> Failed (dig output empty)${NC}"; continue; }

        while read -r record
        do
            echo -e "${host} ${GREEN}>>${NC} ${record}"
            echo "${record}" >> "${dirs_output}"
            echo "${host}:${record}" >> "${dirs_map}"
        done <<< "${digout}"

    done < "${dirs_input}"

    sort -u "${dirs_output}" -o "${dirs_output}"
    sort -u "${dirs_map}" -o "${dirs_map}"
}

function _urls2all
{
    dirs_urls="${1:-./scope_url}"
    dirs_dns="${2:-./scope_dns}"
    dirs_map="${3:-./scope_map}"
    dirs_ips="${4:-./scope}"

    _urls2dns "${dirs_urls}" "${dirs_dns}"
    echo ""
    _dns2ip "${dirs_dns}" "${dirs_ips}" "${dirs_map}"
}

function _scope_parse
{
    file_input="${1:-./scope}"
    dirs_output="$PWD"
    file_out_ip="${dirs_output}/scope_ip"
    file_out_dns="${dirs_output}/scope_dns"
    file_out_url="${dirs_output}/scope_url"
    file_out_map="${dirs_output}/scope_map"

    _pnavi_banner "scope parsing"
    
    [[ ! -e "${file_input}" ]] && { _pnavi_output "${RED}file ${file_input} does not exist\n"; return 1; }

    while read -r entry
    do
        if echo "${entry}" | grep -F '://' &> /dev/null; then
            _pnavi_output "${entry} ${GREEN}>>${NC} URL ${GREEN}>>${NC} ${file_out_url}\n"
            echo "${entry}" >> "${file_out_url}"
        
        elif [[ "${entry}" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then
            _pnavi_output "${entry} ${GREEN}>>${NC} IPv4 ${GREEN}>>${NC} ${file_out_ip}\n"
            echo "${entry}" >> "${file_out_ip}"

        elif echo "${entry}" | grep -P '(?=^.{5,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)' &> /dev/null; then
            _pnavi_output "${entry} ${GREEN}>>${NC} DNS ${GREEN}>>${NC} ${file_out_dns}\n"
            echo "${entry}" >> "${file_out_dns}"

        else
            _pnavi_output "couldnt process ${RED}${entry}${NC}\n"
        fi
    done < "${file_input}"

    _pnavi_output ""
    _urls2dns "${file_out_url}" "${file_out_dns}"

    _pnavi_output ""
    _dns2ip "${file_out_dns}" "${file_out_ip}" "${file_out_map}"
}

function _whois
{
    dirs_input="${1:-./scope}"
    dirs_output="${2:-./whois/}"
    delay="${3:-3}"

    echo -e "${BLUE}Pentest-Navi - whois (delay: ${delay}s)${NC}"
    echo -e "Output directory: ${dirs_output}"

    slept="true"

    [[ ! -d "${dirs_output}" ]] && mkdir -p "${dirs_output}"

    while read -r host
    do
        [[ -z "${host}" ]] && continue

        ## sleep to not hammer whois dbs
        [[ "${slept}" == "false" ]] && sleep 3

        out="${dirs_output}whois-${host}.txt"

        data="$( whois "${host}" )"
        ret=$?
        [[ $ret -ne 0 ]] && { echo -e "${RED}${host} failed (whois exit: $ret)${NC}"; continue; }

        orgname="$(echo "${data}" | grep -y "orgname" | awk '{$1=$1};1')"
        netrange="$(echo "${data}" | grep -y "netrange" | awk '{$1=$1};1')"

        # [[ -z "${orgname}" ]] && orgname="$(echo ${data} | grep -y "netname:" | awk '{$1=$1};1')"
        
        echo -en "${GREEN}${host}${NC} "
        [[ -n "${netrange}" ]] && echo -n "(${netrange}) "
        [[ -n "${orgname}"  ]] && echo -n "(${orgname}) "
        echo ""
        
        echo "${data}" > "${out}"
        slept="false"

    done < "${dirs_input}"
}